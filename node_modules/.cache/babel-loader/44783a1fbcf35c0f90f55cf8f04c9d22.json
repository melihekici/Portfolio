{"ast":null,"code":"import _regeneratorRuntime from\"/home/canavar/Desktop/react/tutorial/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/canavar/Desktop/react/tutorial/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/canavar/Desktop/react/tutorial/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from\"react\";import*as tf from'@tensorflow/tfjs';import labels from\"./labels\";import styles from\"./Classifier.module.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Classifier(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isModelLoading=_useState2[0],setIsModelLoading=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),model=_useState4[0],setModel=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),imageURL=_useState6[0],setImageURL=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),classificationResult=_useState8[0],setClassificationResult=_useState8[1];var imageRef=useRef();function loadModel(){return _loadModel.apply(this,arguments);}function _loadModel(){_loadModel=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _model;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setIsModelLoading(true);_context2.prev=1;_context2.next=4;return tf.loadLayersModel('model.json');case 4:_model=_context2.sent;setModel(_model);setIsModelLoading(false);_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);setIsModelLoading(false);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[1,9]]);}));return _loadModel.apply(this,arguments);};var uploadImage=function uploadImage(e){var files=e.target.files;if(files.length>0){var url=URL.createObjectURL(files[0]);setImageURL(url);}else{setImageURL(null);};};useEffect(function(){loadModel();},[]);useEffect(function(){if(imageURL){setClassificationResult(\"Classifying...\");};setTimeout(function(){if(imageURL){identify();};},200);},[imageURL]);if(isModelLoading){return/*#__PURE__*/_jsx(\"h2\",{children:\"Model Loading...\"});};var identify=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tensor,pred,predIndex;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:tensor=tf.browser.fromPixels(imageRef.current).resizeNearestNeighbor([props.height?props.height:224,props.width?props.width:224]).toFloat().div(tf.scalar(255.0)).expandDims();_context.next=3;return model.predict(tensor).data();case 3:pred=_context.sent;predIndex=pred.reduce(function(m,c,i,arr){return c>arr[m]?i:m;},0);setClassificationResult(labels[predIndex]);case 6:case\"end\":return _context.stop();}}},_callee);}));return function identify(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:styles['image-div'],children:/*#__PURE__*/_jsx(\"img\",{ref:imageRef,alt:\"Classification\",className:styles.myImg,id:\"myImg\",src:imageURL})}),/*#__PURE__*/_jsx(\"div\",{className:styles['input-div'],children:/*#__PURE__*/_jsx(\"input\",{onChange:uploadImage,type:\"file\"})}),/*#__PURE__*/_jsxs(\"div\",{className:styles['classification-div'],children:[\"Classification Result: \",classificationResult]})]});}export default Classifier;","map":{"version":3,"sources":["/home/canavar/Desktop/react/tutorial/portfolio/src/components/ImageClassification/Classifier.js"],"names":["React","useState","useEffect","useRef","tf","labels","styles","Classifier","props","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","classificationResult","setClassificationResult","imageRef","loadModel","loadLayersModel","console","log","uploadImage","e","files","target","length","url","URL","createObjectURL","setTimeout","identify","tensor","browser","fromPixels","current","resizeNearestNeighbor","height","width","toFloat","div","scalar","expandDims","predict","data","pred","predIndex","reduce","m","c","i","arr","myImg"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport labels from \"./labels\"\n\nimport styles from \"./Classifier.module.css\";\n\nfunction Classifier(props) {\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [classificationResult, setClassificationResult] = useState(\"\");\n\n  const imageRef = useRef();\n\n  async function loadModel() {\n    setIsModelLoading(true);\n    try {\n      const model = await tf.loadLayersModel('model.json');\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  };\n\n  const uploadImage = (e) => {\n    const {files} = e.target;\n    if(files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageURL(url);\n    }else {\n      setImageURL(null);\n    };\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n\n  useEffect(() => {\n      if(imageURL){\n        setClassificationResult(\"Classifying...\")\n      };\n    setTimeout(() => {\n        if(imageURL) {\n            identify();\n        };\n    }, 200);\n  }, [imageURL]);\n\n  if (isModelLoading) {\n    return <h2>Model Loading...</h2>\n  };\n\n  const identify = async () => {\n    let tensor = tf.browser.fromPixels(imageRef.current)\n      .resizeNearestNeighbor([props.height ? props.height : 224, props.width ? props.width : 224])\n      .toFloat()\n      .div(tf.scalar(255.0))\n      .expandDims();\n    const pred = await model.predict(tensor).data();\n    const predIndex = pred.reduce((m, c, i, arr) => c > arr[m] ? i : m, 0);\n    setClassificationResult(labels[predIndex]);\n  };\n  \n  return (\n    <React.Fragment>\n    <div className={styles['image-div']}><img ref={imageRef} alt=\"Classification\" className={styles.myImg} id=\"myImg\" src={imageURL}/></div>\n    <div className={styles['input-div']}>\n        <input onChange={uploadImage} type='file' />\n    </div>\n    <div className={styles['classification-div']}>Classification Result: {classificationResult}</div>\n    </React.Fragment>\n\n  );\n}\n\nexport default Classifier;\n"]},"metadata":{},"sourceType":"module"}