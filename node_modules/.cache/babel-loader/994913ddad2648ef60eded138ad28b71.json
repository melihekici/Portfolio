{"ast":null,"code":"var _jsxFileName = \"/home/canavar/Desktop/react/tutorial/portfolio/src/components/ImageClassification/Classifier.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport labels from \"./labels\";\nimport styles from \"./Classifier.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Classifier(props) {\n  _s();\n\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [classificationResult, setClassificationResult] = useState(\"\");\n  const imageRef = useRef();\n\n  async function loadModel() {\n    setIsModelLoading(true);\n\n    try {\n      const model = await tf.loadLayersModel('model.json');\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  }\n\n  ;\n\n  const uploadImage = e => {\n    const {\n      files\n    } = e.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageURL(url);\n    } else {\n      setImageURL(null);\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n  useEffect(() => {\n    if (imageURL) {\n      setClassificationResult(\"Classifying...\");\n    }\n\n    ;\n    setTimeout(() => {\n      if (imageURL) {\n        identify();\n      }\n\n      ;\n    }, 200);\n  }, [imageURL]);\n\n  if (isModelLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Model Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  ;\n\n  const identify = async () => {\n    let tensor = tf.browser.fromPixels(imageRef.current).resizeNearestNeighbor([props.height ? props.height : 224, props.width]).toFloat().div(tf.scalar(255.0)).expandDims();\n    const pred = await model.predict(tensor).data();\n    const predIndex = pred.reduce((m, c, i, arr) => c > arr[m] ? i : m, 0);\n    setClassificationResult(labels[predIndex]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['image-div'],\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        ref: imageRef,\n        alt: \"Classification\",\n        className: styles.myImg,\n        id: \"myImg\",\n        src: imageURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['input-div'],\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: uploadImage,\n        type: \"file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['classification-div'],\n      children: [\"Classification Result: \", classificationResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Classifier, \"0X0ezKTujMKmrSL1aJQWswFCPo4=\");\n\n_c = Classifier;\nexport default Classifier;\n\nvar _c;\n\n$RefreshReg$(_c, \"Classifier\");","map":{"version":3,"sources":["/home/canavar/Desktop/react/tutorial/portfolio/src/components/ImageClassification/Classifier.js"],"names":["React","useState","useEffect","useRef","tf","labels","styles","Classifier","props","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","classificationResult","setClassificationResult","imageRef","loadModel","loadLayersModel","error","console","log","uploadImage","e","files","target","length","url","URL","createObjectURL","setTimeout","identify","tensor","browser","fromPixels","current","resizeNearestNeighbor","height","width","toFloat","div","scalar","expandDims","pred","predict","data","predIndex","reduce","m","c","i","arr","myImg"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport labels from \"./labels\"\n\nimport styles from \"./Classifier.module.css\";\n\nfunction Classifier(props) {\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [classificationResult, setClassificationResult] = useState(\"\");\n\n  const imageRef = useRef();\n\n  async function loadModel() {\n    setIsModelLoading(true);\n    try {\n      const model = await tf.loadLayersModel('model.json');\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  };\n\n  const uploadImage = (e) => {\n    const {files} = e.target;\n    if(files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageURL(url);\n    }else {\n      setImageURL(null);\n    };\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n\n  useEffect(() => {\n      if(imageURL){\n        setClassificationResult(\"Classifying...\")\n      };\n    setTimeout(() => {\n        if(imageURL) {\n            identify();\n        };\n    }, 200);\n  }, [imageURL]);\n\n  if (isModelLoading) {\n    return <h2>Model Loading...</h2>\n  };\n\n  const identify = async () => {\n    let tensor = tf.browser.fromPixels(imageRef.current)\n      .resizeNearestNeighbor([props.height ? props.height : 224,props.width])\n      .toFloat()\n      .div(tf.scalar(255.0))\n      .expandDims();\n    const pred = await model.predict(tensor).data();\n    const predIndex = pred.reduce((m, c, i, arr) => c > arr[m] ? i : m, 0);\n    setClassificationResult(labels[predIndex]);\n  };\n  \n  return (\n    <React.Fragment>\n    <div className={styles['image-div']}><img ref={imageRef} alt=\"Classification\" className={styles.myImg} id=\"myImg\" src={imageURL}/></div>\n    <div className={styles['input-div']}>\n        <input onChange={uploadImage} type='file' />\n    </div>\n    <div className={styles['classification-div']}>Classification Result: {classificationResult}</div>\n    </React.Fragment>\n\n  );\n}\n\nexport default Classifier;\n"]},"metadata":{},"sourceType":"module"}